import telebot
import requests
import json
import os
from telebot import types

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_TOKEN = os.getenv("API_TOKEN")
API_URL = 'https://autotechnik.store/api/v1/customers/'

bot = telebot.TeleBot(BOT_TOKEN)

LINKS_FILE = 'chat_links.json'
MANAGER_FILE = 'manager_ids.json'
ACTIVE_DIALOGS = 'active_dialogs.json'

def load_json_file(filename):
    if os.path.exists(filename):
        with open(filename, encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json_file(data, filename):
    with open(filename, 'w', encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@bot.message_handler(commands=['start'])
def start(message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.chat.id}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    markup.add(button)
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=markup
    )

@bot.message_handler(commands=['register_login'])
def register_login_manual(message):
    try:
        login = message.text.split(' ')[1].strip()
    except IndexError:
        bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø—Ä–∏–º–µ—Ä: /register_login ivanov")
        return

    managers = load_json_file(MANAGER_FILE)
    managers[login] = message.chat.id
    save_json_file(managers, MANAGER_FILE)

    bot.reply_to(message, f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä: {login}")
    print(f"[DEBUG] –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {login} ‚Üí {message.chat.id}")

@bot.message_handler(commands=['stop'])
def stop_dialog(message):
    dialogs = load_json_file(ACTIVE_DIALOGS)
    if str(message.chat.id) in dialogs:
        del dialogs[str(message.chat.id)]
        save_json_file(dialogs, ACTIVE_DIALOGS)
        bot.send_message(message.chat.id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("dialog:"))
def handle_dialog_start(call):
    client_id = call.data.split(":")[1]
    manager_id = str(call.message.chat.id)

    dialogs = load_json_file(ACTIVE_DIALOGS)
    dialogs[manager_id] = client_id
    save_json_file(dialogs, ACTIVE_DIALOGS)

    bot.send_message(call.message.chat.id, f"""‚úÖ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_id}.
–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–º—É.
–ù–∞–ø–∏—à–∏—Ç–µ /stop —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.""")

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    raw_phone = message.contact.phone_number
    phone = raw_phone.strip().replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    if phone.startswith("8"):
        phone = "+7" + phone[1:]
    elif phone.startswith("7") and not phone.startswith("+7"):
        phone = "+7" + phone[1:]
    if phone.startswith("+7") and len(phone) == 12:
        code = phone[2:5]
        part1 = phone[5:8]
        part2 = phone[8:10]
        part3 = phone[10:]
        phone = f'+7({code}){part1}-{part2}-{part3}'

    user_id = message.chat.id
    response = requests.get(API_URL, params={'token': API_TOKEN, 'phone': phone})
    try:
        client = response.json().get('result', [None])[0]
    except:
        client = None

    if not client:
        bot.send_message(user_id, f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {phone}")
        print(f"[DEBUG] –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {phone}")
        return

    manager_login = client.get('managerLogin')
    fio = f"{client.get('surname', '')} {client.get('name', '')}".strip()
    office = client.get('officeName', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

    managers = load_json_file(MANAGER_FILE)
    manager_id = managers.get(manager_login)

    if not manager_id:
        bot.send_message(user_id, f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä ({manager_login}) –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram.")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(f"üîÅ –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å {fio}", callback_data=f"dialog:{user_id}"))

    bot.send_message(manager_id, f"""üì¨ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:

üë§ {fio}
üìû {phone}
üÜî Telegram ID: {user_id}
""", reply_markup=markup)

    links = load_json_file(LINKS_FILE)
    links[str(user_id)] = manager_id
    links[str(manager_id)] = user_id
    save_json_file(links, LINKS_FILE)

    bot.send_message(user_id, f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_login} ({office}). –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
    print(f"[DEBUG] –°–≤—è–∑–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –∫–ª–∏–µ–Ω—Ç {user_id} ‚Üî –º–µ–Ω–µ–¥–∂–µ—Ä {manager_id}")

@bot.message_handler(func=lambda m: True)
def handle_chat(message):
    user_id = str(message.chat.id)
    dialogs = load_json_file(ACTIVE_DIALOGS)

    if user_id in dialogs:
        client_id = dialogs[user_id]
        bot.copy_message(client_id, message.chat.id, message.message_id)
        return

    links = load_json_file(LINKS_FILE)
    if user_id in links:
        peer_id = links[user_id]
        bot.copy_message(peer_id, message.chat.id, message.message_id)
    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ /start.")

bot.polling()
