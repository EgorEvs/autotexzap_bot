import telebot
import requests
import json
import os
from telebot import types

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_TOKEN = os.getenv("API_TOKEN")
API_URL = 'https://autotechnik.store/api/v1/customers/'

bot = telebot.TeleBot(BOT_TOKEN)

LINKS_FILE = 'chat_links.json'
MANAGER_FILE = 'manager_ids.json'

def load_links():
    if os.path.exists(LINKS_FILE):
        with open(LINKS_FILE, encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_links(data):
    with open(LINKS_FILE, 'w', encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_managers():
    if os.path.exists(MANAGER_FILE):
        with open(MANAGER_FILE, encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_managers(data):
    with open(MANAGER_FILE, 'w', encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def format_phone_to_database_style(phone):
    phone = phone.strip().replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    if phone.startswith("8"):
        phone = "+7" + phone[1:]
    elif phone.startswith("7") and not phone.startswith("+7"):
        phone = "+7" + phone[1:]
    if phone.startswith("+7") and len(phone) == 12:
        code = phone[2:5]
        part1 = phone[5:8]
        part2 = phone[8:10]
        part3 = phone[10:]
        return f'+7({code}){part1}-{part2}-{part3}'
    return phone

def get_client_info(phone):
    try:
        response = requests.get(API_URL, params={'token': API_TOKEN, 'phone': phone})
        return response.json().get('result', [None])[0]
    except:
        return None

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    markup.add(button)
    bot.send_message(
        message.chat.id,
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=markup
    )

@bot.message_handler(commands=['register_login'])
def register_login_manual(message):
    try:
        login = message.text.split(' ')[1].strip()
    except IndexError:
        bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø—Ä–∏–º–µ—Ä: /register_login ivanov")
        return

    managers = load_managers()
    managers[login] = message.chat.id
    save_managers(managers)

    bot.reply_to(message, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä: {login}")

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    raw_phone = message.contact.phone_number
    phone = format_phone_to_database_style(raw_phone)
    user_id = message.chat.id
    client = get_client_info(phone)

    if not client:
        bot.send_message(user_id, f"–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {phone}")
        return

    manager_login = client.get('managerLogin')
    managers = load_managers()
    manager_id = managers.get(manager_login)

    old_links = load_links()
    old_manager_id = old_links.get(str(user_id))
    if old_manager_id and old_manager_id != manager_id:
        bot.send_message(old_manager_id,
            f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {phone} —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –¥—Ä—É–≥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: {manager_login}")

    if not manager_id:
        bot.send_message(user_id, f"–ú–µ–Ω–µ–¥–∂–µ—Ä ({manager_login}) –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram.")
        return

    fio = f"{client.get('surname', '')} {client.get('name', '')}".strip()
    office = client.get('officeName', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

    bot.send_message(manager_id,
        f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:

"
        f"üë§ –ò–º—è: {fio}
"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
"
        f"üè¢ –¢–æ—á–∫–∞: {office}
"
        f"üÜî Telegram ID –∫–ª–∏–µ–Ω—Ç–∞: {user_id}"
    )
    bot.send_message(manager_id, f"(–í—ã—à–µ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ)")

    old_links[str(user_id)] = manager_id
    old_links[str(manager_id)] = user_id
    save_links(old_links)

    bot.send_message(user_id, f"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_login} ({office}). –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")

@bot.message_handler(func=lambda m: True)
def handle_chat(message):
    links = load_links()
    user_id = str(message.chat.id)

    if user_id in links:
        peer_id = links[user_id]
        bot.copy_message(peer_id, message.chat.id, message.message_id)
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ /start.")

bot.polling()
